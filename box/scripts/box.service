#!/system/bin/sh

scripts=$(realpath "$0")
scripts_dir=$(dirname "${scripts}")
source /data/adb/box/settings.ini

PROPFILE="/data/adb/modules/box_for_root/module.prop"

box_check_logs() {
  # Delete logs for each bin in the list
  log Info "deleting and backup logs"
  for bin in "${bin_list[@]}"; do
    if [ -f "${box_run}/${bin}.log" ]; then
      mv "${box_run}/${bin}.log" "${box_run}/${bin}-$(date +%Y-%m-%d-%H-%M-%S).log"
    fi
  done
  # Delete other log files
  find "${box_run}" -maxdepth 1 -type f \( -name "root" -o -name "*.list" -o -name "*.inotify.log" \) -exec rm -f {} +
  # Delete logs 10 minutes ago or older
  find "${box_run}" -maxdepth 1 -type f -name "*.log" -mmin +10 -exec rm -f {} +
}

box_bin_alive() {
  local PID=$(<"${box_pid}" 2>/dev/null)
  if ! kill -0 "$PID" 2>/dev/null; then
    log Error "$(<"${box_run}/${bin_name}.log")"
    log Error "${bin_name} service is not running."
    log Error "please check ${bin_name}.log for more information."
    log Error "killing stale pid $PID"
    for bin in "${bin_list[@]}"; do
      killall -15 "${bin}" >/dev/null 2>&1 || busybox pkill -15 "${bin}" >/dev/null 2>&1 
    done
    "${scripts_dir}/box.iptables" disable >/dev/null 2>&1
    [ -f "${box_pid}" ] && rm -f "${box_pid}"
    exit 1
  else
    return 0
  fi
}

box_run_crontab() {
  # Start crond with the "-c" option and keep it in the background
  nohup busybox crond -c "${box_run}" > /dev/null 2>&1 &
  # Delete the previous crontab and create a new crontab
  busybox crontab -c "${box_run}" -r
  touch "${box_run}/root"
  chmod 0755 "${box_run}/root"

  if [ "${run_crontab}" = "true" ]; then
    log Debug "Cron job enabled"
    echo "${interva_update} ${scripts_dir}/box.tool geosub" >> "${box_run}/root"
    log Debug "Interval crontab geox and subs: ${interva_update}."
    log Info "${bin_name} geox updates: ${update_geo}."
    if [[ "${bin_name}" == @(clash|sing-box) ]]; then
      log Info "${bin_name} subscription update: ${update_subscription}."
    fi
  else
    log Info "Cron Job disabled"
    log Info "Crontab geox and subscription is disabled."
  fi
}

xclash() {
  local clash_option="${clash_option:-meta}" # Default to "meta" if clash_option is not set
  current_clash="$(readlink ${bin_dir}/clash)"

  if [ ! "$current_clash" = "${bin_dir}/xclash/clash_${clash_option}" ]; then
    if [ -f "${bin_dir}/clash_${clash_option}" ]; then
      if ! ln -sf "${bin_dir}/xclash/clash_${clash_option}" "${box_dir}/bin/clash"; then
        log Error "Failed to use clash_${clash_option}"
        return 1
      fi
    else
      log Error "${bin_dir}/clash_${clash_option} file not found"
      return 1
    fi
  fi
  log Info "xclash {{ clash_$clash_option }} setup completed successfully"
}

box_ownership() {
  # Set ownership and permission of kernel directory
  chown ${box_user_group} ${bin_path}
  chown -R ${box_user_group} ${box_dir}
  chmod 6755 ${bin_path}
  chmod -R 644 ${box_dir}/${bin_name}
}

box_permission() {
  chmod 0700 ${box_dir}/bin/yq
  if [[ "${box_user_group}" == @(root:net_admin|0:3005) && -f "${bin_path}" ]]; then
    # Set ownership and permission of kernel directory
    box_ownership
    log Info "Using kernel in ${bin_path}."
  # elif which ${bin_name} | grep -q "/system/bin/"; then
    # mount -o remount,rw /system/bin/$bin_name
    # # Split box_user_group into user and group using IFS
    # IFS=':' read -r box_user box_group <<< "${box_user_group}"
    # # Check if box_user and box_group exist
    # if ! id -u "${box_user}" 2>/dev/null || ! id -g "${box_group}" 2>/dev/null; then
      # log Error "${box_user_group} error, use root:net_admin instead."
      # box_user_group="root:net_admin"
    # fi
    # bin_path=$(which ${bin_name})
    # # Set ownership and permission of kernel directory
    # box_ownership
    # # Check if user is not root and group is not net_admin
    # if [[ ${box_user_id} -ne 0 || ${box_group_id} -ne 3005 ]]; then
      # # Set capability of kernel directory
      # box_user_group="root:net_admin"
      # if ! setcap 'cap_net_admin,cap_net_raw,cap_net_bind_service+ep' "${bin_path}" 2>&1; then
        # log Warning "setcap 'cap_net_admin,cap_net_raw,cap_net_bind_service+ep' "${bin_path}" authorization failed."
        # bin_path="${box_dir}/bin/${bin_name}"
        # # Set ownership and permission of kernel directory
        # box_ownership
      # fi
    # fi
    # mount -o remount,ro /system/bin/$bin_name
    # log Info "Using kernel in ${bin_path}."
  else
    if  [[ "${box_user_group}" != @(root:net_admin|0:3005) ]]; then
      log Error "does't support user_group {{ $box_user_group }}"
      sed -i "s/box_user_group=.*/box_user_group=\"root:net_admin\"/g" ${settings}
      log Debug "automatically changed to {{ root:net_admin }}, restart box"
      exit 1
    fi
    log Error "Kernel <${bin_name}> is missing."
    log Error "Please download the <${bin_name}> kernel and place it in the ${bin_dir}/ directory."
    log Debug "exec: su -c /data/adb/box/scripts/box.tool upcore"
    exit 1
  fi
}

box_check_bin() {
  if [ ! -x "${bin_path}" ]; then
    log Error "${bin_path} is not executable."
    exit 1
  fi
  case "${bin_name}" in
    clash) version_output=$("${bin_path}" -v) >/dev/null 2>&1 || return 1 ;;
    *) version_output=$("${bin_path}" version) >/dev/null 2>&1 || return 1 ;;
  esac
  log Info "${version_output}"
}

box_create_tun() {
  # Creates a symlink for /dev/tun if it doesn't already exist
  if [ ! -c "/dev/net/tun" ]; then
    if ! mkdir -p /dev/net || ! mknod /dev/net/tun c 10 200; then
      log Warning "Cannot create /dev/net/tun. Possible reasons:"
      log Warning "This script is not executed as root user."
      log Warning "Your system does not support the TUN/TAP driver."
      log Warning "Your system kernel version is not compatible with the TUN/TAP driver."
      exit 1
    fi
  fi
}

prepare_singbox() {
  # check configuration file
  if ! [ -f "${sing_config}" ]; then
    log Error "configuration file ${sing_config} not found"
    exit 1
  else
    log Info "config ${sing_config}"
  fi

  yq_cmd="yq"
  if ! command -v yq &>/dev/null; then
    if [ ! -e "${box_dir}/bin/yq" ]; then
      log Debug "yq file not found, start to download from github"
      ${scripts_dir}/box.tool upyq
    fi
    yq_cmd="${box_dir}/bin/yq"
  fi
  # delete Toggle comment, because yq doesn't work, Execute the sed command to uncomment the "/* ... */", "//" line
  sed -i '/\/\*/,/\*\//d; /^[[:space:]]*\/\//d; /^( *\/\/|\/\*.*\*\/)$/d' "${box_dir}/sing-box/"*.json
  if [[ "${network_mode}" == "mixed" || "${proxy_mode}" == "tun" ]]; then
    if grep -q '"type": "tproxy"' "${sing_config}"; then
      "${yq_cmd}" 'del(.inbounds[] | select(.type == "tproxy"))' -i --output-format=json "${sing_config}"
    fi
    # Checks if "type" is "tun" in configuration
    if grep -q '"type": "tun"' "${sing_config}"; then
      log Info "type (tun) already exists in ${sing_config}"
    else
      # Add "tun" configuration if missing
      "${yq_cmd}" '.inbounds += [{"type": "tun","tag": "tun-in","interface_name": "tun3","inet4_address": "172.19.0.1/30","inet6_address": "fdfe:dcba:9876::1/126","mtu": 9000,"stack": "system","auto_route": true,"strict_route": false,"sniff": true,"sniff_override_destination": false,"include_android_user": [0,10],"include_package": [],"exclude_package": []}]' -i --output-format=json "${sing_config}"
      log Debug "(tun) configuration has been added to ${sing_config}"
    fi
    # Checks if "type" is "redirect" in configuration
    if [ "${network_mode}" = "mixed" ]; then
      if grep -q '"type": "redirect"' "${sing_config}"; then
        log Info "type (redirect) already exists in ${sing_config}"
      else
        # Add "redirect" configuration if missing
        "${yq_cmd}" '.inbounds += [{"type": "redirect","tag": "redirect-in","listen": "::","listen_port": '"${redir_port}"',"sniff": true,"sniff_override_destination": false}]' -i --output-format=json "${sing_config}"
        log Debug "(redirect) configuration has been added to ${sing_config}"
      fi
    fi
    sed -i 's/"auto_detect_interface": false/"auto_detect_interface": true/g' "${box_dir}/sing-box/"*.json
    sed -i 's/auto_route": false/auto_route": true/g' "${box_dir}/sing-box/"*.json
  else
    if grep -q '"type": "tun"' "${sing_config}"; then
      "${yq_cmd}" 'del(.inbounds[] | select(.type == "tun"))' -i --output-format=json "${sing_config}"
    fi
    if grep -q '"type": "redirect"' "${sing_config}"; then
      "${yq_cmd}" 'del(.inbounds[] | select(.type == "redirect"))' -i --output-format=json "${sing_config}"
    fi
    # Checks if "type" is "tproxy" in configuration
    if grep -q '"type": "tproxy"' "${sing_config}"; then
      log Info "type (tproxy) already exists in ${sing_config}"
    else
      # Add "tproxy" configuration if missing
      "${yq_cmd}" '.inbounds += [{"type": "tproxy", "tag": "tproxy-in", "listen": "::", "listen_port": '"${tproxy_port}"', "sniff": true, "sniff_override_destination": false}]' -i --output-format=json "${sing_config}"
      log Debug "(tproxy) configuration has been added to ${sing_config}"
    fi
    # sync tproxy port sing-box, Looping through each JSON file in the directory
    for file in "${box_dir}/sing-box/"*.json; do
      tproxy=$(sed -n 's/.*"type": "\(tproxy\)".*/\1/p' "${file}")
      if [ -n "${tproxy}" ]; then
        "${yq_cmd}" -o=json "(.inbounds[]? | select(.type == \"tproxy\") | .listen_port) = ${tproxy_port}" -i --output-format=json "${file}"
      fi
    done
    sed -i 's/"auto_detect_interface": true/"auto_detect_interface": false/g' "${box_dir}/sing-box/"*.json
    sed -i 's/auto_route": true/auto_route": false/g' "${box_dir}/sing-box/"*.json
  fi
}

prepare_clash() {
  # check configuration file
  if ! [ -f "${clash_config}" ]; then
    log Error "configuration file ${clash_config} not found"
    exit 1
  else
    temp_clash_config_file
    log Info "config ${clash_config}"
  fi

  # ipv6=$(busybox awk '/ipv6:/ { print $2; found=1; exit } END{ if(!found) print "false" }' "${clash_config}" | head -n 1 2>/dev/null)
  # sed -i "s/ipv6=.*/ipv6=\"${ipv6}\"/g" ${settings}
  # sed -i "s/ipv6:.*/ipv6: ${ipv6}/g" "${clash_config}"

  # write external_controller, if not in $clash_config
  clash_external_controller=$(busybox awk '!/^ *#/ && /external-controller: /{print $1}' "${clash_config}")
  if [ -z "${clash_external_controller}" ]; then
    printf "\nexternal-controller: 0.0.0.0:9090" >> "${clash_config}"
  fi
  # write external_ui, if not in $clash_config
  clash_external_ui=$(busybox awk '!/^ *#/ && /external-ui: /{print $1}' "${clash_config}")
  if [ -z "${clash_external_ui}" ]; then
    printf "\nexternal-ui: ./dashboard" >> "${clash_config}"
  fi
  # write tproxy-port, if not in $clash_config
  clash_tproxy_port=$(busybox awk '!/^ *#/ && /tproxy-port: /{print $1}' "${clash_config}")
  if [ -z "${clash_tproxy_port}" ]; then
    printf "\ntproxy-port: ${tproxy_port}" >> "${clash_config}"
  fi
  # write redir-port, if not in $clash_config
  clash_redir_port=$(busybox awk '!/^ *#/ && /redir-port: /{print $1}' "${clash_config}")
  if [ -z "${clash_redir_port}" ]; then
    printf "\nredir-port: ${redir_port}" >> "${clash_config}"
  fi

  if [[ "${network_mode}" == "mixed" || "${proxy_mode}" == "tun" ]]; then
    clash_tun_status=$(busybox awk '!/^ *#/ && /tun:/ { getline; split($0, arr, ": "); print arr[2]; found=1; exit } END{ if (!found) print "" }' "${clash_config}" 2>/dev/null)
    # write TUN settings, if not in $clash_config
    if [ -z "${clash_tun_status}" ]; then
      printf '%s\n' '' 'tun:' \
        '  enable: true' \
        '  mtu: 9000' \
        '  device: utun' \
        '  stack: system # gvisor / system / lwip' \
        '  dns-hijack:' \
        '    - any:53' \
        '    - tcp://any:53' \
        '  auto-route: true' \
        '  strict-route: false' \
        '  auto-detect-interface: true' \
        '  include-android-user: [0, 10]' \
        '  exclude-package: []' \ >> "${clash_config}"
      log Debug "(tun) configuration has been added to ${sing_config}"
    else
      log Info  "type (tun) already exists in ${clash_config}"
    fi
    sed -i "/tun:/ {n;s/enable: false/enable: true/}" "${clash_config}"
  else
    sed -i "/tun:/ {n;s/enable: true/enable: false/}" "${clash_config}"
  fi

  # Reads the enable value from the tun configuration
  clash_tun_status=$(busybox awk -F ': ' '/^tun: *$/{getline; print $2}' "${clash_config}")
  if [ "${clash_tun_status}" != "true" ]; then
    # sync tproxy port
    sed -i -E "s/(tproxy-port: )[0-9]+/\1${tproxy_port}/" "${clash_config}"
    sed -i -E "s/(redir-port: )[0-9]+/\1${redir_port}/" "${clash_config}"
  else
    [ "${proxy_mode}" != "tun" ] && sed -i 's/network_mode=.*/network_mode="mixed"/g' "${settings}"
    # remove tproxy port >>> 0
    sed -i -E "s/(tproxy-port: )[0-9]+/\10/" "${clash_config}"
    # sync redir port
    sed -i -E "s/(redir-port: )[0-9]+/\1${redir_port}/" "${clash_config}"
  fi

  clash_enhanced_mode=$(busybox awk '!/^ *#/ && /enhanced-mode: / { print $2 }' "${clash_config}" 2>/dev/null)
  if [ -z "${clash_enhanced_mode}" ]; then
    # Add enhanced-mode: fake-ip
    sed -i '/dns:/ {n; /enable:.*/ {a\  enhanced-mode: fake-ip
    }}' "$clash_config"
    log Debug "enhanced-mode: fake-ip add success"
  fi

  if [ "${proxy_mode}" != "tun" ]; then
    if [ -n "${packages_list[*]}" ] && [ "${clash_enhanced_mode}" = "fake-ip" ]; then
      log Warning "${proxy_mode} only works in enhanced-mode: redir-host (clash.meta)"
      log Warning "auto replace fake-ip > redir-host"
      sed -i "s/enhanced-mode:.*/enhanced-mode: redir-host/g" "${clash_config}"
    fi
  fi
}

temp_clash_config_file() {
  clash_template="${box_dir}/clash/template"
  temp_clash_config_file="${clash_config}"

  if [ -f "${clash_template}" ]; then
    log debug "use template configuration"
    cp -f "${clash_template}" "${temp_clash_config_file}.temp" && echo "\n" >> "${temp_clash_config_file}.temp"
    sed -n -E '/^proxies:$/,$p' "${clash_config}" >> "${temp_clash_config_file}.temp"
    sed -i '/^[[:space:]]*$/d' "${temp_clash_config_file}.temp"
    if mv "${temp_clash_config_file}.temp" "${clash_config}"; then
      log Info "The merging of the $clash_config and $clash_template files is complete."
    fi
  fi
}

box_run_bin() {
  log Info "client-list: {{ ${bin_list[*]} }}"
  log Info "choose: ${bin_name}, start the service."
  ulimit -SHn 65535
  case "${bin_name}" in
    sing-box)
      prepare_singbox
      if ${bin_path} check -D "${box_dir}/${bin_name}" --config-directory "${box_dir}/${bin_name}" > "${box_run}/${bin_name}.log" 2>&1; then
        nohup busybox setuidgid "${box_user_group}" "${bin_path}" run -D "${box_dir}/${bin_name}" --config-directory "${box_dir}/${bin_name}" > "${bin_log}" 2>&1 &
        PID=$!
        echo -n $PID > "${box_pid}"
        sleep 1
      else
        log Error "$(<"${box_run}/${bin_name}.log")"
        log Error "configuration failed. Please check the ${box_run}/${bin_name}.log file."
        exit 1
      fi
      ;;
    clash)
      prepare_clash
      if ${bin_path} -t -d "${box_dir}/${bin_name}" -f "${clash_config}" > "${box_run}/${bin_name}.log" 2>&1; then
        nohup busybox setuidgid "${box_user_group}" "${bin_path}" -d "${box_dir}/${bin_name}" -f "${clash_config}" > "${bin_log}" 2>&1 &
        PID=$!
        echo -n $PID > "${box_pid}"
        sleep 1
      else
        log Error "$(<"${box_run}/${bin_name}.log")"
        log Error "configuration failed. Please check the ${box_run}/${bin_name}.log file."
        exit 1
      fi
      ;;
    xray)
      # set network_mode variable value to "tproxy"
      sed -i 's/\(network_mode=\)\"[^\"]*\"/\1"tproxy"/g' ${settings}
      [ "${proxy_mode}" = "tun" ] && sed -i 's/\(proxy_mode=\)\"[^\"]*\"/\1"blacklist"/g' ${settings}

      # sync port
      # sed -i "s/port = [0-9]*\.[0-9]*/port = ${tproxy_port}.0/" ${box_dir}/$bin_name/config.toml

      # check configuration file
      if ! [ -f "${box_dir}/${bin_name}/config.toml" ] && ! [ -f "${box_dir}/${bin_name}/config.json" ]; then
        log Error "configuration file not found: ${box_dir}/${bin_name}/config.toml or config.json"
        rm -f "${box_pid}"
        exit 1
      else
        # Displays a configuration xray"
        log Info "config ${box_dir}/${bin_name}/*.json, or *.toml"
      fi

      # run xray
      export XRAY_LOCATION_ASSET="${box_dir}/${bin_name}"
      if ${bin_path} -test -confdir "${box_dir}/${bin_name}" > "${box_run}/${bin_name}.log" 2>&1; then
        nohup busybox setuidgid "${box_user_group}" "${bin_path}" run -confdir "${box_dir}/${bin_name}" > "${bin_log}" 2>&1 &
        PID=$!
        echo -n $PID > "${box_pid}"
        sleep 1
      else
        log Error "$(<"${box_run}/${bin_name}.log")"
        log Error "configuration failed. Please check the ${box_run}/${bin_name}.log file."
        exit 1
      fi
      ;;
    v2fly)
      # set network_mode variable value to "tproxy"
      sed -i 's/\(network_mode=\)\"[^\"]*\"/\1"tproxy"/g' ${settings}
      [ "${proxy_mode}" = "tun" ] && sed -i 's/\(proxy_mode=\)\"[^\"]*\"/\1"blacklist"/g' ${settings}

      # sync port
      # sed -i "s/port = [0-9]*\.[0-9]*/port = ${tproxy_port}.0/" ${box_dir}/$bin_name/config.toml

      # check configuration file
      if ! [ -f "${box_dir}/${bin_name}/config.toml" ] && ! [ -f "${box_dir}/${bin_name}/config.json" ]; then
        log Error "configuration file not found: ${box_dir}/${bin_name}/config.toml or config.json"
        exit 1
      else
        # Displays a configuration v2fly"
        log Info "config ${box_dir}/${bin_name}/*.json, or *.toml"
      fi

      # run v2ray
      export V2RAY_LOCATION_ASSET="${box_dir}/${bin_name}"
      if ${bin_path} test -confdir "${box_dir}/${bin_name}" > "${box_run}/${bin_name}.log" 2>&1; then
        nohup busybox setuidgid "${box_user_group}" "${bin_path}" run -d "${box_dir}/${bin_name}" > "${bin_log}" 2>&1 &
        PID=$!
        echo -n $PID > "${box_pid}"
        sleep 1
      else
        log Error "$(<"${box_run}/${bin_name}.log")"
        log Error "configuration failed. Please check the ${box_run}/${bin_name}.log file."
        exit 1
      fi
      ;;
    *)
      log Error "<${bin_name}> unknown binary."
      exit 1
      ;;
  esac
}

box_cgroup() {
  if [ "${cgroup_memory}" = "true" ]; then
    if ${scripts_dir}/box.tool cgroup; then
      log Info "cgroup limit: ${cgroup_memory_limit}."
    else
      log Warning "failed to enable cgroup for ${bin_name}."
      log Warning "cgroups is turned off"
      sed -i -E "/cgroup_memory/ s/(true)/false/" "${settings}"
    fi
  else
    log Info "${bin_name} cgroup: disabled."
  fi
}

# Function to display the usage of a binary
# This script retrieves information about a running binary process and logs it to a log file.
box_bin_status() {
  # Get the process ID of the binary
  local PID=$(busybox pidof ${bin_name})

  if [ -z "$PID" ]; then
    log Error "${bin_name} is not running."
    return 1
  fi

  log Info "${bin_name} service is running."
  log Info "ProxyMode: ${proxy_mode}, $(if [ "${proxy_mode}" != "tun" ]; then echo NetworkMode: ${network_mode}; fi)"

  # Get the memory usage of the binary
  rss=$(grep VmRSS /proc/$PID/status | busybox awk '{ print $2 }')
  [ "${rss}" -ge 1024 ] && bin_rss="$(expr ${rss} / 1024) MB" || bin_rss="${rss} KB"
  swap=$(grep VmSwap /proc/$PID/status | busybox awk '{ print $2 }')
  [ "${swap}" -ge 1024 ] && bin_swap="$(expr ${swap} / 1024) MB" || bin_swap="${swap} KB"

  # Get the state of the binary
  state=$(grep State /proc/$PID/status | busybox awk '{ print $2" "$3 }')

  # Get the user and group of the binary
  user_group=$(stat -c %U:%G /proc/$PID)

  # Log the information
  log Info "${bin_name} has started with the '${user_group}' user group."
  log Info "${bin_name} status: ${state} (PID: $PID)"
  log Info "${bin_name} memory usage: ${bin_rss}, swap: ${bin_swap}"

  # Get the CPU usage of the binary
  cpu=$(ps -p $PID -o %cpu | busybox awk 'NR==2{print $1}' 2> /dev/null)
  if [ -n "${cpu}" ]; then
    log Info "${bin_name} CPU usage: ${cpu}%"
  else
    log Info "${bin_name} CPU usage: not available"
  fi

  # Check battery temperature
  temperature_celsius=$(($(cat /sys/class/power_supply/battery/temp) / 10))
  log Info "battery temperature: ${temperature_celsius}°C"

  # Get the running time of the binary
  running_time=$(busybox ps -o comm,etime | grep ${bin_name} | busybox awk '{print $2}')
  if [ -n "${running_time}" ]; then
    log Info "${bin_name} running time: ${running_time}"
  else
    log Info "${bin_name} running time: not available."
  fi

  # Save the process ID to the pid file
  if [ -n "$PID" ]; then
    sed -Ei 's/^description=(\[.*][[:space:]]*)?/description=[ ♻️ '${bin_name}' service is running ] /g' "$PROPFILE"
    echo -n "$PID" > "${box_pid}"
  fi
}

start_box() {
  # Clear the log file and add the timestamp and delimiter
  # cd /data/adb/box/bin; chmod 755 *
  sed -Ei 's/^description=(\[.*][[:space:]]*)?/description=[ ⚠️ Module is working! but no service is running ] /g' "$PROPFILE"

  echo -n "" > "${box_log}"
  box_version=$(busybox awk '!/^ *#/ && /version=/ { print $0 }' "/data/adb/modules/box_for_root/module.prop" 2>/dev/null)
  if [ -t 1 ]; then
    echo -e "${yellow}$(getprop persist.sys.timezone)${normal}"
    echo -e "${yellow}$(getprop gsm.sim.operator.alpha) / $(getprop gsm.network.type)${normal}"
    echo -e "${yellow}$(date)${normal}"
    echo -e "${yellow}${box_version}${normal}"
    echo -e "${white}--------------------------------------------${normal}"
  else
    {
      echo "$(getprop persist.sys.timezone)"
      echo "$(getprop gsm.sim.operator.alpha) / $(getprop gsm.network.type)"
      echo "$(date)"
      echo "${box_version}"
      echo "--------------------------------------------"
    } | tee -a "${box_log}" > /dev/null 2>&1
  fi

  # Update iptables if bin_name is still running
  # PIDS=("clash" "xray" "sing-box" "v2fly")
  PIDS=("${bin_list[@]}")
  PID=""
  i=0

  while [ -z "$PID" ] && [ "$i" -lt "${#PIDS[@]}" ]; do
    PID=$(busybox pidof "${PIDS[$i]}")
    i=$((i+1))
  done

  if [ -n "$PID" ]; then
    pid_name="${box_dir}/run/pid_name.txt"
    ps -p $PID -o comm= > "${pid_name}"
    sed -i '/^[[:space:]]*$/d' "${pid_name}"
    log Debug "$(<"${pid_name}")(PID: $PID) service is still running, auto restart BOX."
    rm -f "${pid_name}"
    stop_box
    start_box && "${scripts_dir}/box.iptables" renew
    exit 1
  fi

  # Checks if bin_name is defined
  case "${bin_name}" in
    clash)
      log Info "Good day 🐱"
      xclash || exit 1
      ;;
    xray|sing-box|v2fly)
      log Info "Good day 🐱"
      ;;
    *)
      log Error "bin_name: <..${bin_name}..> unknown not defined."
      exit 1
      ;;
  esac

  # Check permissions, check for bin existence, delete old logs, create a TUN if necessary, run box, and wait for 1 second
  box_permission
  if ! box_check_bin; then
    log Error "${bin_name} version information not available."
    exit 1
  fi
  box_check_logs

  # Execute the box_create_tun functions
  if [[ "${network_mode}" == "mixed" || "${proxy_mode}" == "tun" ]]; then
    box_create_tun
  fi

  # Execute box_run_crontab if run_crontab is not equal to "false"
  [ "${run_crontab}" = "true" ] && box_run_crontab || log Info "crontab disabled."

  # Execute the box_cgroup, box_run_bin, box_detected_port, box_bin_alive,box_bin_status functions
  box_run_bin
  box_cgroup
  # $bin_name detected port
  if [ "${port_detect}" = "true" ]; then "${scripts_dir}/box.tool" port; else log Info "${bin_name} skipped port detection."; fi
  count=0
  while [ $count -le 10 ]; do
    sleep 0.15
    box_bin_alive || break
    count=$((count + 1))
  done
  box_bin_status
  # open the yacd in browser
  open_yacd
}

stop_box() {
  stop_cron
  # Kill each binary using a loop
  for bin in "${bin_list[@]}"; do
    # Check if the binary is running using pgrep
    if busybox pgrep "${bin}" >/dev/null; then
      # Use `busybox pkill` to kill the binary with signal 15, otherwise use `killall`.
      if busybox pkill -15 "${bin}" >/dev/null 2>&1; then
        : # Do nothing if busybox pkill is successful
      else
        killall -15 "${bin}" >/dev/null 2>&1 || kill -15 "$(busybox pidof "${bin}")" >/dev/null 2>&1
      fi
    fi
  done
  # Check if the binary has stopped
  sleep 0.5
  if ! busybox pidof "${bin_name}" >/dev/null 2>&1; then
    # Delete the `box.pid` file if it exists
    if [ -f "${box_pid}" ]; then
      rm -f "${box_pid}"
    fi
    log Warning "${bin_name} service is stopped."
    log Warning "${bin_name} disconnected."
    [ -t 1 ] && echo -e "${white}--------------------------------------------${normal}"
  else
    log Warning "${bin_name} Not stopped; may still be shutting down or failed to shut down."
    force_stop
  fi
  sed -Ei 's/^description=(\[.*][[:space:]]*)?/description=[ ⛔ '${bin_name}' service is stopped ] /g' "$PROPFILE"
}

stop_cron() {
  # Find cronjob PID using `pgrep`
  cronkill=$(busybox pgrep -f "crond -c ${box_run}")
  for cron in ${cronkill[@]}; do
    # kill cronjob
    kill -15 "${cron}"
  done
}

force_stop() {
  # try forcing it to shut down.
  log Warning "try forcing it to shut down."
  for bin in "${bin_list[@]}"; do
    # Use `busybox pkill` to kill the binary with signal 9, otherwise use `killall`.
    if busybox pkill -9 "${bin}"; then
      : # Do nothing if busybox pkill is successful
    else
      if command -v killall >/dev/null 2>&1; then
        killall -9 "${bin}" >/dev/null 2>&1 || true
      else
        pkill -9 "${bin}" >/dev/null 2>&1 || true
      fi
    fi
  done
  sleep 0.5
  if ! busybox pidof "${bin_name}" >/dev/null 2>&1; then
    log Warning "done, YOU can sleep peacefully."
    rm -f "${box_pid}"
  fi
}

# Check whether busybox is installed or not on the system using command -v
if ! command -v busybox &> /dev/null; then
  log Error "busybox command not found."
  exit 1
fi

case "$1" in
  start)
    stop_box >> /dev/null 2>&1
    start_box
    ;;
  stop)
    stop_box
    ;;
  restart)
    "${scripts_dir}/box.iptables" disable && stop_box
    sleep 0.5
    start_box && "${scripts_dir}/box.iptables" renew
    ;;
  status)
    # Check whether the service is running or not
    if busybox pidof "${bin_name}" >/dev/null; then
      case "${bin_name}" in
        clash) echo "${yellow}$("${bin_path}" -v)${normal}";;
        *) echo "${yellow}$("${bin_path}" version)${normal}";;
      esac
      box_bin_status
    else
      log Warning "${bin_name} service is stopped."
    fi
    ;;
  cron)
    run_crontab="true"
    stop_cron
    sleep 0.5
    box_run_crontab
    ;;
  kcron)
    stop_cron
    ;;
  *)
    echo "${red}$0 $1 no found${normal}"
    echo "${yellow}usage${normal}: ${green}$0${normal} {${yellow}start|stop|restart|status|cron|kcron${normal}}"
    ;;
esac
