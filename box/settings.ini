#!/system/bin/sh

# Define the path to the settings file
settings="/data/adb/box/settings.ini"

# Check if 'busybox' is installed; if not, add the necessary paths to the environment PATH variable
if ! command -v busybox &> /dev/null; then
  export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/system/bin"
fi

# Retrieve the current time in 12-hour format
current_time=$(date +"%I:%M %P")

# Set the port numbers for tproxy and redir functionalities
tproxy_port="9898"
redir_port="9797"

# Enable or disable port detection: true / false
port_detect="false"

# Enable or disable IPv6 support: true / false
ipv6="false"

# Define a list of available kernel binaries
bin_list=("clash" "sing-box" "xray" "v2fly" "hysteria")

# Specify which option to use for running and downloading premium or mihomo. Ensure premium and mihomo kernels are placed in the /data/adb/box/bin directory
xclash_option="mihomo"

# Select the client to use: clash / sing-box / xray / v2fly / hysteria
bin_name="clash"

# This script is used to set the user and group for BFM core files, if setgiduid is unknown, set it to 0:3005.
box_user_group="root:net_admin"

# Define the network modes:
# redirect: handles tcp + udp[direct]
# tproxy: handles tcp + udp
# mixed: redirect[tcp] + tun[udp]
# enhance: redirect[tcp] + tproxy[udp]
# tun: handles tcp + udp (auto-route)
network_mode="tproxy"

# Configure cgroup to limit memory usage
cgroup_memcg="false"
memcg_limit="25M"

# Configure cgroup for cpuset usage
cgroup_cpuset="false"

# Configure cgroup for blkio usage
cgroup_blkio="false"

# Set box directory variables
box_dir="/data/adb/box"
box_run="${box_dir}/run"
box_log="${box_run}/runs.log"
box_pid="${box_run}/box.pid"
bin_dir="${box_dir}/bin"
bin_path="${bin_dir}/${bin_name}"

# If you don't want to generate the /run/${bin_name}.log file (because it will grow in size over time), replace "${box_run}/${bin_name}.log" with "/dev/null"
bin_log="${box_run}/${bin_name}.log"
# bin_log="/dev/null"

system_packages_file="/data/system/packages.list"
uid_list=("/data/adb/box/run/appuid.list")

# Update subscription & geox. Set update interval using cron, for more information: https://crontab.guru/, set 'true' to enable Cron job
interva_update="0 0,6,12,18 * * *" # will update every hour at 00, 06, 12, 18
run_crontab="false"

# Type "su -c /data/adb/box/scripts/box.tool geox" to update geox
update_geo="true"

# If "renew=true" it will update config.yaml not the subscription configuration. Type "su -c /data/adb/box/scripts/box.tool subs" to update subscription
renew=false
update_subscription="false"

# Example: clash subscription URL
subscription_url_clash='https://proxy-list.cloudaccess.host/vless/api?cc=ID,US,JP,SG&cdn=true&tls=true&limit=10&format=clash' # This is just an example.

# Clash configuration
name_clash_config="config.yaml"
clash_config="${box_dir}/clash/${name_clash_config}"

# Clash subscription
name_provide_clash_config="subscription.yaml"
clash_provide_config="${box_dir}/clash/provide/${name_provide_clash_config}"

# Support rules specified in subscriptions. This is useful when the subscription contains customized rules as well.
custom_rules_subs="false"
name_provide_clash_rules="rules.yaml"
clash_provide_rules="${box_dir}/clash/provide/${name_provide_clash_rules}"

# Sing configuration
name_sing_config="config.json"
sing_config="${box_dir}/sing-box/${name_sing_config}"

write_listap=$(dirname "$settings")/ap.list.cfg
# Check pkg config file
[ -d ${write_listap} ] && rm -rf ${write_listap}
[ ! -f ${write_listap} ] && cat > ${write_listap}<<init
# Allow access for network interfaces with the following prefixes: ap+, wlan+, rndis+, swlan+, ncm+, and eth+
# allow <interface name>
allow ap+
allow wlan+
# allow wlan1
allow rndis+
allow swlan+
allow ncm+
allow eth+
# -----------------🌼🌼----------------------- #
# Ignore network interface
# Ignore <interface name>
# ignore wlan0
# ignore swlan0
# ignore wlan+
init

# Read the list of allowed network interfaces from the configuration file "ap.list.cfg"
ap_list=($(busybox awk '/^allow / {print $2}' ${write_listap}))
# Read the list of ignored network interfaces from the configuration file "ap.list.cfg". These interfaces will be excluded from the output, not applicable in fake-ip mode.
ignore_out_list=($(busybox awk '/^ignore / {print $2}' ${write_listap}))

# Define the package.list.cfg path
pkg_config=$(dirname "$settings")/package.list.cfg
# Check pkg config file
[ -d ${pkg_config} ] && rm -rf ${pkg_config}
[ ! -f ${pkg_config} ] && cat > ${pkg_config}<<init
# 黑/白 名单模式;black/white list mode.
mode:whitelist
# 格式/format:
# package_name ▼
# com.topjohnwu.magisk
# Gid ▼
# 10450 alook
# 99910450 999_alook
init

# Extract mode, package list and gid list
# proxy_mode=$(busybox awk -F: '/^mode:/ {print $2}' ${pkg_config} | tr -d ' ')
# packages_list=($(busybox awk '!/^#/ && /^[^ ]*\.([^ ]*)/ {print $1}' ${pkg_config}))
# gid_list=($(busybox awk '!/^#/ && /^[0-9]{1,8}/ {print $1}' ${pkg_config}))

# Extract mode, package list and gid list
proxy_mode=$(sed -n 's/^mode:\([^ ]*\).*/\1/p' ${pkg_config})
packages_list=($(sed -n '/^[^#]/s/^\([^ ]*\.[^ ]*\).*/\1/p' ${pkg_config}))
gid_list=($(sed -n '/^[^#]/s/^\([0-9]\{1,8\}\).*/\1/p' ${pkg_config}))

notify() {
  # eg: notify $title $content
  # using Xposed edge app toast
  # am start -a android.intent.action.VIEW -n com.jozein.xedgepro/.ui.ActivityPerformAction --ei __0 111 --es __1 "$2" >/dev/null 2>&1
  true
  # using system notification
  # su -lp "2000" -c "cmd notification post -S messaging --conversation '$1' --message '$1':'$2' 'Tag' '$(echo $RANDOM)' " >/dev/null 2>&1
}

log() {
  normal="\033[0m"
  orange="\033[1;38;5;208m"
  red="\033[1;31m"
  green="\033[1;32m"
  yellow="\033[1;33m"
  blue="\033[1;34m"
  # Selects the text color according to the parameters
  case $1 in
    Info) color="${blue}" ;;
    Error) color="${red}" ;;
    Warning) color="${yellow}" ;;
    *) color="${green}" ;;
  esac
  # Add messages to time and parameters
  message="${current_time} [$1]: $2"
  if [ -t 1 ]; then
    # Prints messages to the console
    echo -e "${color}${message}${normal}"
  else
    # Print messages to a log file
    echo "${message}" | tee -a "${box_log}"
  fi
  
  if [[ $TOAST ]]; then
      notify "box_for_root" "${message}"
  fi
}
